
import os
import sys
import json
import numpy as np

from sana_geo import Polygon

def get_fullpath(f):
    return os.path.abspath(os.path.expanduser(f))

def create_directory(f):
    if not os.path.exists(os.path.dirname(f)):
        os.makedirs(os.path.dirname(f))

def get_ofname(ifname, ftype, oname, odir=None, rdir=None):

    # modify the basename and the filetype
    ofname = ifname.replace('.svs', '%s%s' % (oname, ftype))

    # modify the dirpath
    if odir is None:
        d = os.path.dirname(ofname)
    if rdir is None:
        d = odir
    else:
        d = os.path.dirname(ofname).replace(rdir, odir)

    return get_fullpath(os.path.join(d, os.path.basename(ofname)))

def slide_to_anno(slide_f, format=None, adir=None, rdir=None):

    # modify the filetype
    anno_f = slide_f.replace('.svs', '.json')

    # modify the dirpath
    if adir is None:
        d = os.path.dirname(anno_f)
    elif rdir is None:
        d = adir
    else:
        d = os.path.dirname(anno_f).replace(rdir, adir)

    # modify the basename format
    if format is None:
        f = os.path.basename(anno_f)
    else:
        f = format % os.path.basename(anno_f)

    return get_fullpath(os.path.join(d, f))

def read_list_file(list_f):
    f = get_fullpath(list_f)
    return [get_fullpath(l.rstrip()) for l in open(f, 'r')]

# sometimes the json files generated by qupath 7 unreadable bytes
# this function checks if they exist, and removes them from the file
def fix_qupath_annotations(ifname):
    fp = open(ifname, 'rb')
    header = fp.read(7)
    if bytes([header[0]]) != bytes([91]):
        data = fp.read()
        fp.close()
        fp = open(ifname, 'wb')
        fp.write(data)
        fp.close()

def read_qupath_annotations(ifname, mpp, ds):

    # remove unnecessary bytes at beginning of file if they exist
    fix_qupath_annotations(ifname)

    # prepare the input file
    fp = open(ifname, 'r')

    # load the data
    data = json.loads(fp.read())

    # TODO: handle the multipolygon better than this, why is there sometimes 2 sets of coords
    annotations = []
    for annotation in data:
        geo = annotation['geometry']
        if geo['type'] == 'MultiPolygon':
            coords_list = geo['coordinates']
        elif geo['type'] == 'Polygon':
            coords_list = [geo['coordinates']]
        for coords in coords_list:
            x = np.array([float(c[0]) for c in coords[0]])
            y = np.array([float(c[1]) for c in coords[0]])
            poly = Polygon(x, y, mpp, ds, is_micron=False)
            annotations.append(poly)
    return annotations

#
# end of file
