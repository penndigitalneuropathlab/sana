
import os
import sys
import json
import numpy as np

from sana_geo import Polygon

def get_fullpath(f):
    return os.path.abspath(os.path.expanduser(f))

def create_directory(f):
    if not os.path.exists(os.path.dirname(f)):
        os.makedirs(os.path.dirname(f))

def get_ofname(ifname, ftype="", oname="", odir="", rdir=""):

    # modify the basename and the filetype
    if ftype == "":
        ftype = os.path.splitext(ifname)[1]
    ofname = os.path.splitext(os.path.basename(ifname))[0]
    if oname == "":
        ofname += ftype
    else:
        ofname = '%s%s%s' % (ofname, oname, ftype)

    # modify the dirpath
    if odir == "":
        d = os.path.dirname(ifname)
    elif rdir == "":
        d = odir
    else:
        d = os.path.dirname(ifname).replace(rdir, odir)

    return get_fullpath(os.path.join(d, ofname))

def slide_to_anno(slide_f, format=None, adir="", rdir=""):

    # modify the filetype
    anno_f = slide_f.replace('.svs', '.json')

    # modify the dirpath
    if adir == "":
        d = os.path.dirname(anno_f)
    elif rdir == "":
        d = adir
    else:
        d = os.path.dirname(anno_f).replace(rdir, adir)

    # modify the basename format
    if format is None:
        f = os.path.basename(anno_f)
    else:
        f = format % os.path.basename(anno_f)

    return get_fullpath(os.path.join(d, f))

def read_list_file(list_f):
    f = get_fullpath(list_f)
    return [get_fullpath(l.rstrip()) for l in open(f, 'r')]

def anno_to_json(anno, class_name=None, anno_name=None):
    verts = []
    for i in range(anno.n):
        verts.append([anno.x[i], anno.y[i]])
    annotation = {
        "type": "Feature",
        "id": "PathAnnotationObject",
        "geometry": {
          "type": "Polygon",
          "coordinates": [verts]
        },
        "properties": {
          "name": anno_name,
          "classification": {
            "name": class_name,
          },
        }
    }
    return annotation

# sometimes the json files generated by qupath 7 unreadable bytes
# this function checks if they exist, and removes them from the file
def fix_annotations(ifname):
    fp = open(ifname, 'rb')
    header = fp.read(7)
    if bytes([header[0]]) != bytes([91]):
        data = fp.read()
        fp.close()
        fp = open(ifname, 'wb')
        fp.write(data)
        fp.close()

def read_annotations(ifname, mpp=None, ds=None, class_name=None):

    # remove unnecessary bytes at beginning of file if they exist
    fix_annotations(ifname)

    # prepare the input file
    fp = open(ifname, 'r')

    # load the data
    data = json.loads(fp.read())

    # TODO: handle the multipolygon better than this, why is there sometimes 2 sets of coords
    annotations = []
    class_names = []
    anno_names = []
    for annotation in data:
        if class_name is not None:
            if annotation['properties']['classification']['name'] != class_name:
                continue
        geo = annotation['geometry']
        if geo['type'] == 'MultiPolygon':
            coords_list = geo['coordinates']
        elif geo['type'] == 'Polygon':
            coords_list = [geo['coordinates']]
        for coords in coords_list:
            x = np.array([float(c[0]) for c in coords[0]])
            y = np.array([float(c[1]) for c in coords[0]])
            poly = Polygon(x, y, mpp, ds, is_micron=False)
            annotations.append(
                poly)
            class_names.append(
                annotation['properties']['classification']['name'])
            anno_names.append(
                'ROI_'+str(len(anno_names)))
    return annotations, class_names, anno_names

def write_annotations(ofname, annos, class_name=None):
    annotations = []
    for anno in annos:
        anno_name = 'ROI_'+str(len(annotations))
        annotations.append(anno_to_json(anno, class_name, anno_name))
    json.dump(annotations, open(ofname, 'w'))

def append_annotations(ofname, annos, class_name=None, anno_names=None):
    annotations = []
    orig_annos, class_names, anno_names = read_annotations(ofname)
    for i in range(len(orig_annos)):
        if class_name == class_names[i]:
            continue
        annotations.append(anno_to_json(
            orig_annos[i], class_names[i], anno_names[i]))
    for i in range(len(annos)):
        if anno_names is None:
            anno_name = 'ROI_'+str(len(annotations))
        else:
            anno_name = anno_names[i]
        annotations.append(anno_to_json(annos[i], class_name, anno_name))
    json.dump(annotations, open(ofname, 'w'))

#
# end of file
